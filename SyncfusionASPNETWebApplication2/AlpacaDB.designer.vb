'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="ALPACADB")>  _
Partial Public Class AlpacaDBDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertContract(instance As Contract)
    End Sub
  Partial Private Sub UpdateContract(instance As Contract)
    End Sub
  Partial Private Sub DeleteContract(instance As Contract)
    End Sub
  Partial Private Sub InsertCounterparty(instance As Counterparty)
    End Sub
  Partial Private Sub UpdateCounterparty(instance As Counterparty)
    End Sub
  Partial Private Sub DeleteCounterparty(instance As Counterparty)
    End Sub
  Partial Private Sub InsertCounterparties_Role(instance As Counterparties_Role)
    End Sub
  Partial Private Sub UpdateCounterparties_Role(instance As Counterparties_Role)
    End Sub
  Partial Private Sub DeleteCounterparties_Role(instance As Counterparties_Role)
    End Sub
  Partial Private Sub InsertCounterparties_RoleType(instance As Counterparties_RoleType)
    End Sub
  Partial Private Sub UpdateCounterparties_RoleType(instance As Counterparties_RoleType)
    End Sub
  Partial Private Sub DeleteCounterparties_RoleType(instance As Counterparties_RoleType)
    End Sub
  Partial Private Sub InsertCounterparties_Status(instance As Counterparties_Status)
    End Sub
  Partial Private Sub UpdateCounterparties_Status(instance As Counterparties_Status)
    End Sub
  Partial Private Sub DeleteCounterparties_Status(instance As Counterparties_Status)
    End Sub
  Partial Private Sub InsertCountry(instance As Country)
    End Sub
  Partial Private Sub UpdateCountry(instance As Country)
    End Sub
  Partial Private Sub DeleteCountry(instance As Country)
    End Sub
  Partial Private Sub InsertCurrency(instance As Currency)
    End Sub
  Partial Private Sub UpdateCurrency(instance As Currency)
    End Sub
  Partial Private Sub DeleteCurrency(instance As Currency)
    End Sub
  Partial Private Sub InsertEmployee(instance As Employee)
    End Sub
  Partial Private Sub UpdateEmployee(instance As Employee)
    End Sub
  Partial Private Sub DeleteEmployee(instance As Employee)
    End Sub
  Partial Private Sub InsertMetaDataCategory(instance As MetaDataCategory)
    End Sub
  Partial Private Sub UpdateMetaDataCategory(instance As MetaDataCategory)
    End Sub
  Partial Private Sub DeleteMetaDataCategory(instance As MetaDataCategory)
    End Sub
  Partial Private Sub InsertMetaDataCategoriesListValue(instance As MetaDataCategoriesListValue)
    End Sub
  Partial Private Sub UpdateMetaDataCategoriesListValue(instance As MetaDataCategoriesListValue)
    End Sub
  Partial Private Sub DeleteMetaDataCategoriesListValue(instance As MetaDataCategoriesListValue)
    End Sub
  Partial Private Sub InsertMetaDataConfigPerRole(instance As MetaDataConfigPerRole)
    End Sub
  Partial Private Sub UpdateMetaDataConfigPerRole(instance As MetaDataConfigPerRole)
    End Sub
  Partial Private Sub DeleteMetaDataConfigPerRole(instance As MetaDataConfigPerRole)
    End Sub
  Partial Private Sub InsertMetaDataValue(instance As MetaDataValue)
    End Sub
  Partial Private Sub UpdateMetaDataValue(instance As MetaDataValue)
    End Sub
  Partial Private Sub DeleteMetaDataValue(instance As MetaDataValue)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("ALPACADBConnectionString1").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Contracts() As System.Data.Linq.Table(Of Contract)
		Get
			Return Me.GetTable(Of Contract)
		End Get
	End Property
	
	Public ReadOnly Property Counterparties() As System.Data.Linq.Table(Of Counterparty)
		Get
			Return Me.GetTable(Of Counterparty)
		End Get
	End Property
	
	Public ReadOnly Property Counterparties_Roles() As System.Data.Linq.Table(Of Counterparties_Role)
		Get
			Return Me.GetTable(Of Counterparties_Role)
		End Get
	End Property
	
	Public ReadOnly Property Counterparties_RoleTypes() As System.Data.Linq.Table(Of Counterparties_RoleType)
		Get
			Return Me.GetTable(Of Counterparties_RoleType)
		End Get
	End Property
	
	Public ReadOnly Property Counterparties_Status() As System.Data.Linq.Table(Of Counterparties_Status)
		Get
			Return Me.GetTable(Of Counterparties_Status)
		End Get
	End Property
	
	Public ReadOnly Property Countries() As System.Data.Linq.Table(Of Country)
		Get
			Return Me.GetTable(Of Country)
		End Get
	End Property
	
	Public ReadOnly Property Currencies() As System.Data.Linq.Table(Of Currency)
		Get
			Return Me.GetTable(Of Currency)
		End Get
	End Property
	
	Public ReadOnly Property Employees() As System.Data.Linq.Table(Of Employee)
		Get
			Return Me.GetTable(Of Employee)
		End Get
	End Property
	
	Public ReadOnly Property MetaDataCategories() As System.Data.Linq.Table(Of MetaDataCategory)
		Get
			Return Me.GetTable(Of MetaDataCategory)
		End Get
	End Property
	
	Public ReadOnly Property MetaDataCategoriesListValues() As System.Data.Linq.Table(Of MetaDataCategoriesListValue)
		Get
			Return Me.GetTable(Of MetaDataCategoriesListValue)
		End Get
	End Property
	
	Public ReadOnly Property MetaDataConfigPerRoles() As System.Data.Linq.Table(Of MetaDataConfigPerRole)
		Get
			Return Me.GetTable(Of MetaDataConfigPerRole)
		End Get
	End Property
	
	Public ReadOnly Property MetaDataValues() As System.Data.Linq.Table(Of MetaDataValue)
		Get
			Return Me.GetTable(Of MetaDataValue)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Contracts")>  _
Partial Public Class Contract
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _ContractNumber As String
	
	Private _ContractType As String
	
	Private _ContractSubType As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnContractNumberChanging(value As String)
    End Sub
    Partial Private Sub OnContractNumberChanged()
    End Sub
    Partial Private Sub OnContractTypeChanging(value As String)
    End Sub
    Partial Private Sub OnContractTypeChanged()
    End Sub
    Partial Private Sub OnContractSubTypeChanging(value As String)
    End Sub
    Partial Private Sub OnContractSubTypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContractNumber", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property ContractNumber() As String
		Get
			Return Me._ContractNumber
		End Get
		Set
			If (String.Equals(Me._ContractNumber, value) = false) Then
				Me.OnContractNumberChanging(value)
				Me.SendPropertyChanging
				Me._ContractNumber = value
				Me.SendPropertyChanged("ContractNumber")
				Me.OnContractNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContractType", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property ContractType() As String
		Get
			Return Me._ContractType
		End Get
		Set
			If (String.Equals(Me._ContractType, value) = false) Then
				Me.OnContractTypeChanging(value)
				Me.SendPropertyChanging
				Me._ContractType = value
				Me.SendPropertyChanged("ContractType")
				Me.OnContractTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContractSubType", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property ContractSubType() As String
		Get
			Return Me._ContractSubType
		End Get
		Set
			If (String.Equals(Me._ContractSubType, value) = false) Then
				Me.OnContractSubTypeChanging(value)
				Me.SendPropertyChanging
				Me._ContractSubType = value
				Me.SendPropertyChanged("ContractSubType")
				Me.OnContractSubTypeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Counterparties")>  _
Partial Public Class Counterparty
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _ProjectNumber As String
	
	Private _Shortname As String
	
	Private _Longname As String
	
	Private _Counterparties_Status As EntitySet(Of Counterparties_Status)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnProjectNumberChanging(value As String)
    End Sub
    Partial Private Sub OnProjectNumberChanged()
    End Sub
    Partial Private Sub OnShortnameChanging(value As String)
    End Sub
    Partial Private Sub OnShortnameChanged()
    End Sub
    Partial Private Sub OnLongnameChanging(value As String)
    End Sub
    Partial Private Sub OnLongnameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Counterparties_Status = New EntitySet(Of Counterparties_Status)(AddressOf Me.attach_Counterparties_Status, AddressOf Me.detach_Counterparties_Status)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProjectNumber", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property ProjectNumber() As String
		Get
			Return Me._ProjectNumber
		End Get
		Set
			If (String.Equals(Me._ProjectNumber, value) = false) Then
				Me.OnProjectNumberChanging(value)
				Me.SendPropertyChanging
				Me._ProjectNumber = value
				Me.SendPropertyChanged("ProjectNumber")
				Me.OnProjectNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Shortname", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property Shortname() As String
		Get
			Return Me._Shortname
		End Get
		Set
			If (String.Equals(Me._Shortname, value) = false) Then
				Me.OnShortnameChanging(value)
				Me.SendPropertyChanging
				Me._Shortname = value
				Me.SendPropertyChanged("Shortname")
				Me.OnShortnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Longname", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property Longname() As String
		Get
			Return Me._Longname
		End Get
		Set
			If (String.Equals(Me._Longname, value) = false) Then
				Me.OnLongnameChanging(value)
				Me.SendPropertyChanging
				Me._Longname = value
				Me.SendPropertyChanged("Longname")
				Me.OnLongnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Counterparty_Counterparties_Status", Storage:="_Counterparties_Status", ThisKey:="Id", OtherKey:="CounterPartyID")>  _
	Public Property Counterparties_Status() As EntitySet(Of Counterparties_Status)
		Get
			Return Me._Counterparties_Status
		End Get
		Set
			Me._Counterparties_Status.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Counterparties_Status(ByVal entity As Counterparties_Status)
		Me.SendPropertyChanging
		entity.Counterparty = Me
	End Sub
	
	Private Sub detach_Counterparties_Status(ByVal entity As Counterparties_Status)
		Me.SendPropertyChanging
		entity.Counterparty = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Counterparties_Roles")>  _
Partial Public Class Counterparties_Role
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _CounterpartyID As Integer
	
	Private _RoleID As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnCounterpartyIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCounterpartyIDChanged()
    End Sub
    Partial Private Sub OnRoleIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnRoleIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CounterpartyID", DbType:="Int NOT NULL")>  _
	Public Property CounterpartyID() As Integer
		Get
			Return Me._CounterpartyID
		End Get
		Set
			If ((Me._CounterpartyID = value)  _
						= false) Then
				Me.OnCounterpartyIDChanging(value)
				Me.SendPropertyChanging
				Me._CounterpartyID = value
				Me.SendPropertyChanged("CounterpartyID")
				Me.OnCounterpartyIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleID", DbType:="Int NOT NULL")>  _
	Public Property RoleID() As Integer
		Get
			Return Me._RoleID
		End Get
		Set
			If ((Me._RoleID = value)  _
						= false) Then
				Me.OnRoleIDChanging(value)
				Me.SendPropertyChanging
				Me._RoleID = value
				Me.SendPropertyChanged("RoleID")
				Me.OnRoleIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Counterparties_RoleTypes")>  _
Partial Public Class Counterparties_RoleType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _AccountType As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnAccountTypeChanging(value As String)
    End Sub
    Partial Private Sub OnAccountTypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountType", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property AccountType() As String
		Get
			Return Me._AccountType
		End Get
		Set
			If (String.Equals(Me._AccountType, value) = false) Then
				Me.OnAccountTypeChanging(value)
				Me.SendPropertyChanging
				Me._AccountType = value
				Me.SendPropertyChanged("AccountType")
				Me.OnAccountTypeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Counterparties_Status")>  _
Partial Public Class Counterparties_Status
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _CounterPartyID As System.Nullable(Of Integer)
	
	Private _Status As String
	
	Private _StatusCategory As String
	
	Private _Counterparty As EntityRef(Of Counterparty)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnCounterPartyIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCounterPartyIDChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnStatusCategoryChanging(value As String)
    End Sub
    Partial Private Sub OnStatusCategoryChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Counterparty = CType(Nothing, EntityRef(Of Counterparty))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CounterPartyID", DbType:="Int")>  _
	Public Property CounterPartyID() As System.Nullable(Of Integer)
		Get
			Return Me._CounterPartyID
		End Get
		Set
			If (Me._CounterPartyID.Equals(value) = false) Then
				If Me._Counterparty.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCounterPartyIDChanging(value)
				Me.SendPropertyChanging
				Me._CounterPartyID = value
				Me.SendPropertyChanged("CounterPartyID")
				Me.OnCounterPartyIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="NVarChar(50)")>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StatusCategory", DbType:="NVarChar(50)")>  _
	Public Property StatusCategory() As String
		Get
			Return Me._StatusCategory
		End Get
		Set
			If (String.Equals(Me._StatusCategory, value) = false) Then
				Me.OnStatusCategoryChanging(value)
				Me.SendPropertyChanging
				Me._StatusCategory = value
				Me.SendPropertyChanged("StatusCategory")
				Me.OnStatusCategoryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Counterparty_Counterparties_Status", Storage:="_Counterparty", ThisKey:="CounterPartyID", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Counterparty() As Counterparty
		Get
			Return Me._Counterparty.Entity
		End Get
		Set
			Dim previousValue As Counterparty = Me._Counterparty.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Counterparty.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Counterparty.Entity = Nothing
					previousValue.Counterparties_Status.Remove(Me)
				End If
				Me._Counterparty.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Counterparties_Status.Add(Me)
					Me._CounterPartyID = value.Id
				Else
					Me._CounterPartyID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Counterparty")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Countries")>  _
Partial Public Class Country
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Country_ID As String
	
	Private _Country_Name As String
	
	Private _FocusCountry As System.Nullable(Of Boolean)
	
	Private _CurrencyUsed As String
	
	Private _Currency As EntityRef(Of Currency)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCountry_IDChanging(value As String)
    End Sub
    Partial Private Sub OnCountry_IDChanged()
    End Sub
    Partial Private Sub OnCountry_NameChanging(value As String)
    End Sub
    Partial Private Sub OnCountry_NameChanged()
    End Sub
    Partial Private Sub OnFocusCountryChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnFocusCountryChanged()
    End Sub
    Partial Private Sub OnCurrencyUsedChanging(value As String)
    End Sub
    Partial Private Sub OnCurrencyUsedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Currency = CType(Nothing, EntityRef(Of Currency))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Country_ID", DbType:="NVarChar(2) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Country_ID() As String
		Get
			Return Me._Country_ID
		End Get
		Set
			If (String.Equals(Me._Country_ID, value) = false) Then
				Me.OnCountry_IDChanging(value)
				Me.SendPropertyChanging
				Me._Country_ID = value
				Me.SendPropertyChanged("Country_ID")
				Me.OnCountry_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Country_Name", DbType:="NVarChar(40) NOT NULL", CanBeNull:=false)>  _
	Public Property Country_Name() As String
		Get
			Return Me._Country_Name
		End Get
		Set
			If (String.Equals(Me._Country_Name, value) = false) Then
				Me.OnCountry_NameChanging(value)
				Me.SendPropertyChanging
				Me._Country_Name = value
				Me.SendPropertyChanged("Country_Name")
				Me.OnCountry_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FocusCountry", DbType:="Bit")>  _
	Public Property FocusCountry() As System.Nullable(Of Boolean)
		Get
			Return Me._FocusCountry
		End Get
		Set
			If (Me._FocusCountry.Equals(value) = false) Then
				Me.OnFocusCountryChanging(value)
				Me.SendPropertyChanging
				Me._FocusCountry = value
				Me.SendPropertyChanged("FocusCountry")
				Me.OnFocusCountryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurrencyUsed", DbType:="NVarChar(3)")>  _
	Public Property CurrencyUsed() As String
		Get
			Return Me._CurrencyUsed
		End Get
		Set
			If (String.Equals(Me._CurrencyUsed, value) = false) Then
				If Me._Currency.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCurrencyUsedChanging(value)
				Me.SendPropertyChanging
				Me._CurrencyUsed = value
				Me.SendPropertyChanged("CurrencyUsed")
				Me.OnCurrencyUsedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Currency_Country", Storage:="_Currency", ThisKey:="CurrencyUsed", OtherKey:="CurrencyCode", IsForeignKey:=true)>  _
	Public Property Currency() As Currency
		Get
			Return Me._Currency.Entity
		End Get
		Set
			Dim previousValue As Currency = Me._Currency.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Currency.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Currency.Entity = Nothing
					previousValue.Countries.Remove(Me)
				End If
				Me._Currency.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Countries.Add(Me)
					Me._CurrencyUsed = value.CurrencyCode
				Else
					Me._CurrencyUsed = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Currency")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Currencies")>  _
Partial Public Class Currency
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CurrencyID As Integer
	
	Private _CurrencyCode As String
	
	Private _CurrencyName As String
	
	Private _X1000 As System.Nullable(Of Boolean)
	
	Private _CurrencyType As String
	
	Private _Countries As EntitySet(Of Country)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCurrencyIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCurrencyIDChanged()
    End Sub
    Partial Private Sub OnCurrencyCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCurrencyCodeChanged()
    End Sub
    Partial Private Sub OnCurrencyNameChanging(value As String)
    End Sub
    Partial Private Sub OnCurrencyNameChanged()
    End Sub
    Partial Private Sub OnX1000Changing(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnX1000Changed()
    End Sub
    Partial Private Sub OnCurrencyTypeChanging(value As String)
    End Sub
    Partial Private Sub OnCurrencyTypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Countries = New EntitySet(Of Country)(AddressOf Me.attach_Countries, AddressOf Me.detach_Countries)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurrencyID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CurrencyID() As Integer
		Get
			Return Me._CurrencyID
		End Get
		Set
			If ((Me._CurrencyID = value)  _
						= false) Then
				Me.OnCurrencyIDChanging(value)
				Me.SendPropertyChanging
				Me._CurrencyID = value
				Me.SendPropertyChanged("CurrencyID")
				Me.OnCurrencyIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurrencyCode", DbType:="NVarChar(3) NOT NULL", CanBeNull:=false)>  _
	Public Property CurrencyCode() As String
		Get
			Return Me._CurrencyCode
		End Get
		Set
			If (String.Equals(Me._CurrencyCode, value) = false) Then
				Me.OnCurrencyCodeChanging(value)
				Me.SendPropertyChanging
				Me._CurrencyCode = value
				Me.SendPropertyChanged("CurrencyCode")
				Me.OnCurrencyCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurrencyName", DbType:="NVarChar(30)")>  _
	Public Property CurrencyName() As String
		Get
			Return Me._CurrencyName
		End Get
		Set
			If (String.Equals(Me._CurrencyName, value) = false) Then
				Me.OnCurrencyNameChanging(value)
				Me.SendPropertyChanging
				Me._CurrencyName = value
				Me.SendPropertyChanged("CurrencyName")
				Me.OnCurrencyNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_X1000", DbType:="Bit")>  _
	Public Property X1000() As System.Nullable(Of Boolean)
		Get
			Return Me._X1000
		End Get
		Set
			If (Me._X1000.Equals(value) = false) Then
				Me.OnX1000Changing(value)
				Me.SendPropertyChanging
				Me._X1000 = value
				Me.SendPropertyChanged("X1000")
				Me.OnX1000Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurrencyType", DbType:="NVarChar(1)")>  _
	Public Property CurrencyType() As String
		Get
			Return Me._CurrencyType
		End Get
		Set
			If (String.Equals(Me._CurrencyType, value) = false) Then
				Me.OnCurrencyTypeChanging(value)
				Me.SendPropertyChanging
				Me._CurrencyType = value
				Me.SendPropertyChanged("CurrencyType")
				Me.OnCurrencyTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Currency_Country", Storage:="_Countries", ThisKey:="CurrencyCode", OtherKey:="CurrencyUsed")>  _
	Public Property Countries() As EntitySet(Of Country)
		Get
			Return Me._Countries
		End Get
		Set
			Me._Countries.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Countries(ByVal entity As Country)
		Me.SendPropertyChanging
		entity.Currency = Me
	End Sub
	
	Private Sub detach_Countries(ByVal entity As Country)
		Me.SendPropertyChanging
		entity.Currency = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Employees")>  _
Partial Public Class Employee
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _EmployeeID As Integer
	
	Private _EmployeeUserID As String
	
	Private _EmployeeFirstname As String
	
	Private _EmployeeLastname As String
	
	Private _EmployeeTitle As String
	
	Private _EmployeeRole As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnEmployeeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnEmployeeIDChanged()
    End Sub
    Partial Private Sub OnEmployeeUserIDChanging(value As String)
    End Sub
    Partial Private Sub OnEmployeeUserIDChanged()
    End Sub
    Partial Private Sub OnEmployeeFirstnameChanging(value As String)
    End Sub
    Partial Private Sub OnEmployeeFirstnameChanged()
    End Sub
    Partial Private Sub OnEmployeeLastnameChanging(value As String)
    End Sub
    Partial Private Sub OnEmployeeLastnameChanged()
    End Sub
    Partial Private Sub OnEmployeeTitleChanging(value As String)
    End Sub
    Partial Private Sub OnEmployeeTitleChanged()
    End Sub
    Partial Private Sub OnEmployeeRoleChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnEmployeeRoleChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property EmployeeID() As Integer
		Get
			Return Me._EmployeeID
		End Get
		Set
			If ((Me._EmployeeID = value)  _
						= false) Then
				Me.OnEmployeeIDChanging(value)
				Me.SendPropertyChanging
				Me._EmployeeID = value
				Me.SendPropertyChanged("EmployeeID")
				Me.OnEmployeeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeUserID", DbType:="NVarChar(50)")>  _
	Public Property EmployeeUserID() As String
		Get
			Return Me._EmployeeUserID
		End Get
		Set
			If (String.Equals(Me._EmployeeUserID, value) = false) Then
				Me.OnEmployeeUserIDChanging(value)
				Me.SendPropertyChanging
				Me._EmployeeUserID = value
				Me.SendPropertyChanged("EmployeeUserID")
				Me.OnEmployeeUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeFirstname", DbType:="NVarChar(50)")>  _
	Public Property EmployeeFirstname() As String
		Get
			Return Me._EmployeeFirstname
		End Get
		Set
			If (String.Equals(Me._EmployeeFirstname, value) = false) Then
				Me.OnEmployeeFirstnameChanging(value)
				Me.SendPropertyChanging
				Me._EmployeeFirstname = value
				Me.SendPropertyChanged("EmployeeFirstname")
				Me.OnEmployeeFirstnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeLastname", DbType:="NVarChar(50)")>  _
	Public Property EmployeeLastname() As String
		Get
			Return Me._EmployeeLastname
		End Get
		Set
			If (String.Equals(Me._EmployeeLastname, value) = false) Then
				Me.OnEmployeeLastnameChanging(value)
				Me.SendPropertyChanging
				Me._EmployeeLastname = value
				Me.SendPropertyChanged("EmployeeLastname")
				Me.OnEmployeeLastnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeTitle", DbType:="NVarChar(50)")>  _
	Public Property EmployeeTitle() As String
		Get
			Return Me._EmployeeTitle
		End Get
		Set
			If (String.Equals(Me._EmployeeTitle, value) = false) Then
				Me.OnEmployeeTitleChanging(value)
				Me.SendPropertyChanging
				Me._EmployeeTitle = value
				Me.SendPropertyChanged("EmployeeTitle")
				Me.OnEmployeeTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeRole", DbType:="Int")>  _
	Public Property EmployeeRole() As System.Nullable(Of Integer)
		Get
			Return Me._EmployeeRole
		End Get
		Set
			If (Me._EmployeeRole.Equals(value) = false) Then
				Me.OnEmployeeRoleChanging(value)
				Me.SendPropertyChanging
				Me._EmployeeRole = value
				Me.SendPropertyChanged("EmployeeRole")
				Me.OnEmployeeRoleChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MetaDataCategories")>  _
Partial Public Class MetaDataCategory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _MetaDCategory As String
	
	Private _MetaDType As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnMetaDCategoryChanging(value As String)
    End Sub
    Partial Private Sub OnMetaDCategoryChanged()
    End Sub
    Partial Private Sub OnMetaDTypeChanging(value As String)
    End Sub
    Partial Private Sub OnMetaDTypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MetaDCategory", DbType:="NVarChar(255)")>  _
	Public Property MetaDCategory() As String
		Get
			Return Me._MetaDCategory
		End Get
		Set
			If (String.Equals(Me._MetaDCategory, value) = false) Then
				Me.OnMetaDCategoryChanging(value)
				Me.SendPropertyChanging
				Me._MetaDCategory = value
				Me.SendPropertyChanged("MetaDCategory")
				Me.OnMetaDCategoryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MetaDType", DbType:="NVarChar(50)")>  _
	Public Property MetaDType() As String
		Get
			Return Me._MetaDType
		End Get
		Set
			If (String.Equals(Me._MetaDType, value) = false) Then
				Me.OnMetaDTypeChanging(value)
				Me.SendPropertyChanging
				Me._MetaDType = value
				Me.SendPropertyChanged("MetaDType")
				Me.OnMetaDTypeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MetaDataCategoriesListValues")>  _
Partial Public Class MetaDataCategoriesListValue
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _ListValue As String
	
	Private _UsedForCatID As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnListValueChanging(value As String)
    End Sub
    Partial Private Sub OnListValueChanged()
    End Sub
    Partial Private Sub OnUsedForCatIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUsedForCatIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ListValue", DbType:="NVarChar(50)")>  _
	Public Property ListValue() As String
		Get
			Return Me._ListValue
		End Get
		Set
			If (String.Equals(Me._ListValue, value) = false) Then
				Me.OnListValueChanging(value)
				Me.SendPropertyChanging
				Me._ListValue = value
				Me.SendPropertyChanged("ListValue")
				Me.OnListValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UsedForCatID", DbType:="Int")>  _
	Public Property UsedForCatID() As System.Nullable(Of Integer)
		Get
			Return Me._UsedForCatID
		End Get
		Set
			If (Me._UsedForCatID.Equals(value) = false) Then
				Me.OnUsedForCatIDChanging(value)
				Me.SendPropertyChanging
				Me._UsedForCatID = value
				Me.SendPropertyChanged("UsedForCatID")
				Me.OnUsedForCatIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MetaDataConfigPerRole")>  _
Partial Public Class MetaDataConfigPerRole
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _MetaDCategoryID As Integer
	
	Private _MetaDUniqueFlag As Boolean
	
	Private _MetaDMaxOccurences As System.Nullable(Of Integer)
	
	Private _MetaDMandatory As System.Nullable(Of Boolean)
	
	Private _ApliesToRoleType As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnMetaDCategoryIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnMetaDCategoryIDChanged()
    End Sub
    Partial Private Sub OnMetaDUniqueFlagChanging(value As Boolean)
    End Sub
    Partial Private Sub OnMetaDUniqueFlagChanged()
    End Sub
    Partial Private Sub OnMetaDMaxOccurencesChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMetaDMaxOccurencesChanged()
    End Sub
    Partial Private Sub OnMetaDMandatoryChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnMetaDMandatoryChanged()
    End Sub
    Partial Private Sub OnApliesToRoleTypeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnApliesToRoleTypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MetaDCategoryID", DbType:="Int NOT NULL")>  _
	Public Property MetaDCategoryID() As Integer
		Get
			Return Me._MetaDCategoryID
		End Get
		Set
			If ((Me._MetaDCategoryID = value)  _
						= false) Then
				Me.OnMetaDCategoryIDChanging(value)
				Me.SendPropertyChanging
				Me._MetaDCategoryID = value
				Me.SendPropertyChanged("MetaDCategoryID")
				Me.OnMetaDCategoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MetaDUniqueFlag", DbType:="Bit NOT NULL")>  _
	Public Property MetaDUniqueFlag() As Boolean
		Get
			Return Me._MetaDUniqueFlag
		End Get
		Set
			If ((Me._MetaDUniqueFlag = value)  _
						= false) Then
				Me.OnMetaDUniqueFlagChanging(value)
				Me.SendPropertyChanging
				Me._MetaDUniqueFlag = value
				Me.SendPropertyChanged("MetaDUniqueFlag")
				Me.OnMetaDUniqueFlagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MetaDMaxOccurences", DbType:="Int")>  _
	Public Property MetaDMaxOccurences() As System.Nullable(Of Integer)
		Get
			Return Me._MetaDMaxOccurences
		End Get
		Set
			If (Me._MetaDMaxOccurences.Equals(value) = false) Then
				Me.OnMetaDMaxOccurencesChanging(value)
				Me.SendPropertyChanging
				Me._MetaDMaxOccurences = value
				Me.SendPropertyChanged("MetaDMaxOccurences")
				Me.OnMetaDMaxOccurencesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MetaDMandatory", DbType:="Bit")>  _
	Public Property MetaDMandatory() As System.Nullable(Of Boolean)
		Get
			Return Me._MetaDMandatory
		End Get
		Set
			If (Me._MetaDMandatory.Equals(value) = false) Then
				Me.OnMetaDMandatoryChanging(value)
				Me.SendPropertyChanging
				Me._MetaDMandatory = value
				Me.SendPropertyChanged("MetaDMandatory")
				Me.OnMetaDMandatoryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApliesToRoleType", DbType:="Int")>  _
	Public Property ApliesToRoleType() As System.Nullable(Of Integer)
		Get
			Return Me._ApliesToRoleType
		End Get
		Set
			If (Me._ApliesToRoleType.Equals(value) = false) Then
				Me.OnApliesToRoleTypeChanging(value)
				Me.SendPropertyChanging
				Me._ApliesToRoleType = value
				Me.SendPropertyChanged("ApliesToRoleType")
				Me.OnApliesToRoleTypeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MetaDataValues")>  _
Partial Public Class MetaDataValue
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _CategoryID As System.Nullable(Of Integer)
	
	Private _CounterpartyId As System.Nullable(Of Integer)
	
	Private _MetaDValue As String
	
	Private _ValidityFrom As System.Nullable(Of Date)
	
	Private _ValidityTo As System.Nullable(Of Date)
	
	Private _Period As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnCategoryIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCategoryIDChanged()
    End Sub
    Partial Private Sub OnCounterpartyIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCounterpartyIdChanged()
    End Sub
    Partial Private Sub OnMetaDValueChanging(value As String)
    End Sub
    Partial Private Sub OnMetaDValueChanged()
    End Sub
    Partial Private Sub OnValidityFromChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnValidityFromChanged()
    End Sub
    Partial Private Sub OnValidityToChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnValidityToChanged()
    End Sub
    Partial Private Sub OnPeriodChanging(value As String)
    End Sub
    Partial Private Sub OnPeriodChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryID", DbType:="Int")>  _
	Public Property CategoryID() As System.Nullable(Of Integer)
		Get
			Return Me._CategoryID
		End Get
		Set
			If (Me._CategoryID.Equals(value) = false) Then
				Me.OnCategoryIDChanging(value)
				Me.SendPropertyChanging
				Me._CategoryID = value
				Me.SendPropertyChanged("CategoryID")
				Me.OnCategoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CounterpartyId", DbType:="Int")>  _
	Public Property CounterpartyId() As System.Nullable(Of Integer)
		Get
			Return Me._CounterpartyId
		End Get
		Set
			If (Me._CounterpartyId.Equals(value) = false) Then
				Me.OnCounterpartyIdChanging(value)
				Me.SendPropertyChanging
				Me._CounterpartyId = value
				Me.SendPropertyChanged("CounterpartyId")
				Me.OnCounterpartyIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MetaDValue", DbType:="NVarChar(MAX)")>  _
	Public Property MetaDValue() As String
		Get
			Return Me._MetaDValue
		End Get
		Set
			If (String.Equals(Me._MetaDValue, value) = false) Then
				Me.OnMetaDValueChanging(value)
				Me.SendPropertyChanging
				Me._MetaDValue = value
				Me.SendPropertyChanged("MetaDValue")
				Me.OnMetaDValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ValidityFrom", DbType:="Date")>  _
	Public Property ValidityFrom() As System.Nullable(Of Date)
		Get
			Return Me._ValidityFrom
		End Get
		Set
			If (Me._ValidityFrom.Equals(value) = false) Then
				Me.OnValidityFromChanging(value)
				Me.SendPropertyChanging
				Me._ValidityFrom = value
				Me.SendPropertyChanged("ValidityFrom")
				Me.OnValidityFromChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ValidityTo", DbType:="Date")>  _
	Public Property ValidityTo() As System.Nullable(Of Date)
		Get
			Return Me._ValidityTo
		End Get
		Set
			If (Me._ValidityTo.Equals(value) = false) Then
				Me.OnValidityToChanging(value)
				Me.SendPropertyChanging
				Me._ValidityTo = value
				Me.SendPropertyChanged("ValidityTo")
				Me.OnValidityToChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Period", DbType:="NVarChar(50)")>  _
	Public Property Period() As String
		Get
			Return Me._Period
		End Get
		Set
			If (String.Equals(Me._Period, value) = false) Then
				Me.OnPeriodChanging(value)
				Me.SendPropertyChanging
				Me._Period = value
				Me.SendPropertyChanged("Period")
				Me.OnPeriodChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
